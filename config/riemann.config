;; setup to setup riemann and elasticsearch to
;; work as monitoring/log backend for
;; Kibana and Grafana


;; global configuration to adapt to specific infrastructure
(def binding-ip "0.0.0.0")
(def elastic-url "http://192.168.2.1:9200") ;; <-- could be read from env using https://github.com/clojurewerkz/elastisch/blob/master/src/clojurewerkz/elastisch/rest.clj#L26


;; This is where the logging of riemann goes to.
(logging/init {:file "riemann.log"
               :console true
               })

#_(logging/set-level org.apache.log4j.Level/INFO)
#_(logging/set-level "org.apache.http" org.apache.log4j.Level/DEBUG)


; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host binding-ip]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))


;; Integrate with Elasticsearch (ES)
(require '[riemann.elastic :as elastic])


;; Load up some index mappings that optimize for time-series data
;; (elastic/load-index-template "default" "config/default-mapping.json")

(let [index-sink   (default :ttl 300 (index))
      es-connection (elastic/es-connection elastic-url {:conn-timeout 5000 :socket-timeout 5000})
      elastic-sink (elastic/es-index es-connection "logmon")
      async-elastic-sink (async-queue!
                      :elastic-search
                      {:queue-size 10000     ; 10,000 events max
                        :core-pool-size 4    ; Minimum 4 threads
                        :max-pools-size 100  ; Maxium 100 threads
                      }
                      elastic-sink)]

  (streams
    (rollup 1 5
      elastic-sink
      )
    index-sink))
